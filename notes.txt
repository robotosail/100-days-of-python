

'''
# Comparison Operators

    Operators       Meaning
    ---------       --------
        >           Greater than
        <           Less than
        >=          Greater than or equal to
        <=          Less than or equal to
        ==          Equal to
        !=          Not equal to
        %           Divdes a number by another number and gives you the remainder
    
* Remeber that one equal sign means that you are assigning to a variable, while two means you are checking.

# LOGICAL OPERATORS
    and
    or
    not
'''

# Data Types: --

    # Strings:
        # "Hello"[4] # the [] allows you to pull out a letter in a string.
        # The string function converts any data to a string.
        # num_char = len(input("What is your name? ")).
        # new_num_char = str(num_char).
        # print("Your name has "+ new_num_char + " characters.").

    # Integer:
        # print(123 + 245) # in order to add numbers you remove the quotations.
        # in order to add separation in numbers use underscore instead of commas.
            # 123_123

    # Float:
        # 3.14159.

    # Boolean:
        # True.
        # False.
    # list:
        an array of things differenciated by the [] symbol
        each item in a list is seperated by a comma
        things are gotten by their index value

        ## usage:
            list = ["hi", "2"]
            print(list[0])
    # dict/dictionaries:
        they are initialized by using the {} symbol
        things are gotten in key and values
        each item must have quotations around it
        ## usage:
            dict = {"key": "value"}
            print(dict["key"])
    # tuples:
        similar to list only differenciated by the () instead of a []
        similar to list it uses index position to get an item
        Unlike the values of tuples cannot be changed it stays constant
        ## usage:
            my_tuple = (1, 2, 3)
            print(my_tuple[0])

# Functions:
    # Type:-
        # checks the type of data it is; wheter strings or integer
        # type()

    # Round:-
        # rounds numbers up or down
        # used by using round()
        # allows you to choose the position to round to

    # Float:-
        # turns a number into a float
        # a = float(123)
        # print(type(a))
    
    # Str:-
        str()
        # 
    # F Strings:-
        # it allows you to mix multiple data types together.
        # use it by putting f in front of the " sign and the puting the different data types inside of a {}

    # Sum:-
        sum():
        adds a multople values together and returns the added number

    # random.choice():
        picks an item randomly from a list
    
    # Max:-
        finds the maximum number within a set of data
        max(data)

    # Min:-
        finds the minimum number within a set of data
        min(data)

    # shuffle:-
        comes from the random module
        used to shuffle a data set
        usage: random.shuffle(x)
    # len():
        can be used to get the number of characters in a string or the length of a list
    # .join(list):
        combines the items in a list to a string
    # def:
        it allows you to make your own function
        the function can also take parameters
    # .index():
        allows you to get the index position of a string from a list
    # .title():
        turns things to camel case
    # docstrings:
        informs what the code does
        it must be at the start 
    # remove():
        searches for the first instance of the element and removes it 
    # pop():
        removes and returns the elements at the given index
    # capitalize():
        capitalizes strings
    # pass:
        allows for empty functions
    # class keyword:
        creates a new class
    # Class inheritance:
        allows a specific class to inherit some traits from another class.
        it avoids repetition   
    # clear:
        empties a the values in a list
    # open:
        opens a file
        allows you to read or edit the file
    # close:
        make sure to close the file to save memory
###

### Expressions:
    # Mathematical expression
    # 3 + 5 # the addition sign
    # 3 - 5 # the subtraction sign
    # 3 * 5 # the multiplication sign
    # 3 / 5 # the division sign
    # 2 ** 2 # The exponent sign
    # 2 // 3 # The float sign; it removes the decimal from the result 
    # result = 4/2, 
    # result /= 4/2 # The /= continues the division
###

#--------- Examples ------------
    ### open
        ## to read a file
            file = open("the file you want to open")
            contents = file.read() # returns the contents in the file

            #better practice
            with open("the file you want to open") as file:
                contents = file.read()
                print(contents)

        ## write into a file
        if the file doesn't exist is creates it for you
            with open("test.txt", mode="w") as file: # w stands for write
                file.write("This is a test")    <----------------|
            * note this method deletes everything in the file ---|

            with open("test.txt", mode="a") as file: # a stands for append
                file.write("This is a text")

            * the difference is that a appends to the file
    ###
    
    ### Round
    print(round(8/3, 2))
    ###

    ### Expressions
    result = 4/2
    result /= 4/2
    ###

    ### F-Strings
    # score = 0
    # height = 1.8
    # winning = True
    # print(f"your score is {score}")
    ###

    ### Random.choice
                names = ["jack", "ben", "dad"]
                random_Choices = random.choice(names)
                print(random_Choices)
    ###

    ### Max
        number = [100, 10, 90]
        max(number)
    ###

    ### Min
        number = [100, 10, 90]
        min(number)
    ###

    ### shuffle
        x = [1,2,3,4]
        random.shuffle(x)
    ###

    ### join
        list = ["a", "b", "c"]
        print(f"{" ".join(list)}")
    ###

    ### def
        def my_function():
            print("This is a simple function")
        my_function()
        #function with parameters
        def my_function(name):
            print(f"Hello {name}")
        my_function()
    ###

    ### .index()
        fruits = ["apple", "bannana", "cherry", "mango"]
        x = fruits.index("bannana")
    ###

    ### .title()
        "DAvid".title()
        output >> David
    ###

    ### docstrings
    def help():
        """ It helps """
    ###

    ### capitalize()
        "faskdl".capitalize()
    ###

    ### pass:
        def empty():
            pass
    ###

    ### class:
        class Empty():
            pass
    ###

    ### pass:
        def empty():
            pass
    ###

    ### clear():
        list= [12, 123, 1234]
        list.clear()
    ###

    ### inheritance:
        class Fish(the class you want to inherit):
            def __init__(self):
                super.()__init__()
    ###
#----------#

# Global Scope:
    # player_health = 10

    # def game():
    #     def drink_potion():
    #         # the variable player_health is accessible for all because it is a global scope
    #         potion_strength = 2
    #         print(player_health)
    #     # putting the function call outside of the game function doesn't allow it to be called because it doesn't have access to the game function
    #     drink_potion()
    # inorder to get access to the global scope in a function you use the key word global

    Example:
    player_health = 1
    def game():
        global player_health
        player_health = 2
        print(player_health)
    game()


# Local Scope - it exists within functions

    # def drink_potion():
    #     # the variable potion_strength is only accessible in this function
    #     potion_strength = 2
    #     print(potion_strength)

    # drink_potion()
    # print(potion_strength)

## imports:
    # Basic import
        # import turtle
        # turtle = turtle.Turtle()

    # from import
        from turtle import turtle
        # turtle = Turtle()
    # import all
        it allows for easy access but can get confused with other functions in your code
        from turtle import *
        forward(100)
    # import as alias
        # from turtle import whatevernameyouwant
        turtle = whatevernameyouwant()

    # slice:
        the first digit it the start to splice the list the second digit specifies where to stop, the third digit specifies the step count
        # works with tuples
        piano = [1,2,3,4,5,6,7]
        # gets every from index two to the end of the list so - 3, 4, 5, 6, 7
        print(piano[2:])
        # gets every from index two to 5 from the list so - 3, 4, 5, 6
        print(piano[2:5])
        # gets every from index two to 5 from the list and steps by 2 so - 3, 4, 5, 6
        print(piano[2:5:2])
        print(piano[::2])