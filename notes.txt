

'''
# Comparison Operators

    Operators       Meaning
    ---------       --------
        >           Greater than
        <           Less than
        >=          Greater than or equal to
        <=          Less than or equal to
        ==          Equal to
        !=          Not equal to
        %           Divdes a number by another number and gives you the remainder
    
* Remeber that one equal sign means that you are assigning to a variable, while two means you are checking.

# LOGICAL OPERATORS
    and
    or
    not
'''

# Data Types: --

    # Strings:
        # "Hello"[4] # the [] allows you to pull out a letter in a string.
        # The string function converts any data to a string.
        # num_char = len(input("What is your name? ")).
        # new_num_char = str(num_char).
        # print("Your name has "+ new_num_char + " characters.").

    # Integer:
        # print(123 + 245) # in order to add numbers you remove the quotations.
        # in order to add separation in numbers use underscore instead of commas.
            # 123_123

    # Float:
        # 3.14159.

    # Boolean:
        # True.
        # False.
    # list:
        an array of things differenciated by the [] symbol
        each item in a list is seperated by a comma
        things are gotten by their index value

        ## usage:
            list = ["hi", "2"]
            print(list[0])
    # dict/dictionaries:
        they are initialized by using the {} symbol
        things are gotten in key and values
        each item must have quotations around it
        ## usage:
            dict = {"key": "value"}
            print(dict["key"])
    # tuples:
        similar to list only differenciated by the () instead of a []
        similar to list it uses index position to get an item
        Unlike the values of tuples cannot be changed it stays constant
        ## usage:
            my_tuple = (1, 2, 3)
            print(my_tuple[0])

# Functions:
    # Type:-
        # checks the type of data it is; wheter strings or integer
        # type()

    # Round:-
        # rounds numbers up or down
        # used by using round()
        # allows you to choose the position to round to

    # Float:-
        # turns a number into a float
        # a = float(123)
        # print(type(a))
    
    # Str:-
        str()
        # 
    # F Strings:-
        # it allows you to mix multiple data types together.
        # use it by putting f in front of the " sign and the puting the different data types inside of a {}

    # Sum:-
        sum():
        adds a multople values together and returns the added number

    # random.choice():
        picks an item randomly from a list
    
    # Max:-
        finds the maximum number within a set of data
        max(data)

    # Min:-
        finds the minimum number within a set of data
        min(data)

    # shuffle:-
        comes from the random module
        used to shuffle a data set
        usage: random.shuffle(x)
    # len():
        can be used to get the number of characters in a string or the length of a list
    # .join(list):
        combines the items in a list to a string
    # def:
        it allows you to make your own function
        the function can also take parameters
    # .index():
        allows you to get the index position of a string from a list
    # .title():
        turns things to camel case
    # docstrings:
        informs what the code does
        it must be at the start 
    # remove():
        searches for the first instance of the element and removes it 
    # pop():
        removes and returns the elements at the given index
    # capitalize():
        capitalizes strings
    # pass:
        allows for empty functions
    # class keyword:
        creates a new class
    # Class inheritance:
        allows a specific class to inherit some traits from another class.
        it avoids repetition   
    # clear:
        empties a the values in a list
    # strip():
        removes whitespaces or any specified characters from a string
    # open:
        opens a file
        allows you to read or edit the file
    # close():
        make sure to close the file to save memory
    # read():
        allows you to read a file
    # readlines():
        allows you to read a file and return its output as a string
    # Json.dump():
        writes data to json format
    # Json.load():
        reads the json data
    # Json.update():
        updates the json data
    # type hints for variables:
        age:int
        age = 17
    # type hints for function output
        def check(age:int) -> bool:
            if age > 18:
                candrive = True
            else:
                candrive = False
            return candrive
###

### Expressions:
    # Mathematical expression
    # 3 + 5 # the addition sign
    # 3 - 5 # the subtraction sign
    # 3 * 5 # the multiplication sign
    # 3 / 5 # the division sign
    # 2 ** 2 # The exponent sign
    # 2 // 3 # The float sign; it removes the decimal from the result 
    # result = 4/2, 
    # result /= 4/2 # The /= continues the division
###

#--------- Examples ------------
    ### Strip
        char = "dsajlfkdsajl kldsajflkdsajf"
        print(char.strip())
    ###
    ### open
        ## to read a file
            file = open("the file you want to open")
            contents = file.read() # returns the contents in the file

            #better practice
            with open("the file you want to open") as file:
                contents = file.read()
                print(contents)

        ## write into a file
        if the file doesn't exist is creates it for you
            with open("test.txt", mode="w") as file: # w stands for write
                file.write("This is a test")    <----------------|
            * note this method deletes everything in the file ---|

            with open("test.txt", mode="a") as file: # a stands for append
                file.write("This is a text")

            * the difference is that a appends to the file
    ###
    
    ### Round:
        print(round(8/3, 2))
    ###

    ### Expressions:
        result = 4/2
        result /= 4/2
    ###

    ### F-Strings
        # score = 0
        # height = 1.8
        # winning = True
        # print(f"your score is {score}")
    ###

    ### Random.choice
                names = ["jack", "ben", "dad"]
                random_Choices = random.choice(names)
                print(random_Choices)
    ###

    ### Max
        number = [100, 10, 90]
        max(number)
    ###

    ### Min
        number = [100, 10, 90]
        min(number)
    ###

    ### shuffle
        x = [1,2,3,4]
        random.shuffle(x)
    ###

    ### join
        list = ["a", "b", "c"]
        print(f"{" ".join(list)}")
    ###

    ### def
        def my_function():
            print("This is a simple function")
        my_function()
        #function with parameters
        def my_function(name):
            print(f"Hello {name}")
        my_function()
    ###

    ### .index()
        fruits = ["apple", "bannana", "cherry", "mango"]
        x = fruits.index("bannana")
    ###

    ### .title()
        "DAvid".title()
        output >> David
    ###

    ### docstrings
    def help():
        """ It helps """
    ###

    ### capitalize()
        "faskdl".capitalize()
    ###

    ### pass:
        def empty():
            pass
    ###

    ### class:
        class Empty():
            pass
    ###

    ### pass:
        def empty():
            pass
    ###

    ### clear():
        list= [12, 123, 1234]
        list.clear()
    ###

    ### inheritance:
        class Fish(the class you want to inherit):
            def __init__(self):
                super.()__init__()
    ###

    ### decorators:-
        def makebold(text):
            def bold():
                return f"<b>{text()}</b>"
            return bold

        @app.route("/")
        @makebold
        def main():
            return "hello"
        
        The function makebold calls the function bold.
        The function bold calles the parameter as a function while turning its text to bold.

        # FUnctions are first class objects, and can be passed around as arguments
        # functions can be nested inside each other
        def msg():
            print('Hi')

            def message():
                print('Hello how are you')
            return message  # returning this functions and allowing it to be called later

        mse = msg()
        mse()

        # Python decorator - they are meant to modify or delay other functions
        def decorator_function(function):
            def wrapper_function():
                time.sleep(2)
                function()
            return wrapper_function


        @decorator_function  # - it is called syntax sugar it must be untop inorder to work
        def say_hello():
            print("Hello")


        # this is similar to the decorator function
        decorator_function(say_hello)()

        ##interms of flask app
        def about():
            return render_template("about.html")

        app.route("/about")(about)
    ###

#----------#

# Global Scope:
    # player_health = 10

    # def game():
    #     def drink_potion():
    #         # the variable player_health is accessible for all because it is a global scope
    #         potion_strength = 2
    #         print(player_health)
    #     # putting the function call outside of the game function doesn't allow it to be called because it doesn't have access to the game function
    #     drink_potion()
    # inorder to get access to the global scope in a function you use the key word global

    Example:
    player_health = 1
    def game():
        global player_health
        player_health = 2
        print(player_health)
    game()


# Local Scope - it exists within functions

    # def drink_potion():
    #     # the variable potion_strength is only accessible in this function
    #     potion_strength = 2
    #     print(potion_strength)

    # drink_potion()
    # print(potion_strength)

## imports:
    # Basic import
        # import turtle
        # turtle = turtle.Turtle()

    # from import
        from turtle import turtle
        # turtle = Turtle()
    # import all
        it allows for easy access but can get confused with other functions in your code
        from turtle import *
        forward(100)
    # import as alias
        # from turtle import whatevernameyouwant
        turtle = whatevernameyouwant()

    # slice:
        the first digit it the start to splice the list the second digit specifies where to stop, the third digit specifies the step count
        # works with tuples
        piano = [1,2,3,4,5,6,7]
        # gets every from index two to the end of the list so - 3, 4, 5, 6, 7
        print(piano[2:])
        # gets every from index two to 5 from the list so - 3, 4, 5, 6
        print(piano[2:5])
        # gets every from index two to 5 from the list and steps by 2 so - 3, 4, 5, 6
        print(piano[2:5:2])
        print(piano[::2])

interms of font size
562.5% => 90px, 100% => 16px, 1em = 16px
em and percentages get inherited from the parent
so if the parent has a default font size and the child has a font-size both font sizes will be added together
rem ignores all of the parents default font size and uses its own in the em 
rem should be the perferred unit

float:
it works with itmes that generate boxes, and don't have absolute values

clear:
it is the opposite of float, it makes sure the item isn't adjacent to the other items

Setting Environment Variables in command prompt:

    method 1 (Temporary - deletes when terminal is exited):
        set Key=value

    method 2 (permanent - stays even upon exiting terminal):
        setx key "value"

Setting Environment Variables in powershell:
    method 1 (permanent - stays even upon exiting terminal):
        setx key "value"
    method 2 (Temporary - deletes once terminal is closed):
        $Env:key = "value"


Beautiful Soup usage:
    #------------- Beautiful Soup -----------------#
    # from bs4 import BeautifulSoup
    # # import lxml

    # # add the encdoing param so you dont get any errors with unicode characters like emojis and stuff like that
    # with open("website.html", encoding="utf8") as file:
    #     contents = file.read()

    # # making soup
    # # first specify the file content, nect the parser that help understand the lang the content is structured in
    # soup = BeautifulSoup(markup=contents, features="html.parser")

    # # getting the string in the title tag
    # print(soup.title.string)

    # # prints the indented version of the html
    # # print(soup.prettify())

    # # getting the anchor tag - Note it only gets the first item it has found
    # print(soup.a)

    # # Getting all instances of a tag
    # all_anchor_tag = soup.find_all(name="a")

    # # getting only the text
    # for tag in all_anchor_tag:
    #     # print(tag.getText())  # gets only the text
    #     print(tag.get("href"))  # gets the value of the specified attribute

    # # gets and item using any attribute
    # # applies to when there is only one of that item esle use find all
    # heading = soup.find(name="h1", id="name")
    # print(heading)
    # section_heading = soup.find(name="h3", class_="heading")
    # print(section_heading.get("name"))

    # # this gets the anchor tag that is within a paragraph tag
    # company_url = soup.select_one(selector="p a")
    # print(company_url)

    # # it is not restricted to only tags, also works with css selectors like ids and classes etc.
    # name = soup.select_one(selector="#name")
    # print(name)

    # # returns a list of all possible items that have a class of heading
    # headings = soup.select(".heading")
    # print(headings)



Flask basic setup:
    create a file then type
    from flask import Flask
    app = Flask(__name__)

    @app.route("/")
    def Hello_world():
        return "Hello world"

    open the terminal and temporarily add the file to the Environment variable by typing
    $env:FLASK_APP = "yourfile.py"

    or

    setx FLASK_APP "yourfile.py"

    when your done change the word directory to the location of the file
    then run flask run

    or if you don't want to, you can use 
    python -m flask run instead of flask run


z-index in css only works when all elements position is set

Jinja:
    Extending files
        to use a file as a template at the start of the html file type {%extends "base.html"%}

    Include Keyword:
        inorder to reduce repetition in multiple files like in the case of a navbar which is expected to be on all pages
        remove the html for the navbar and put it in a different html file
        use {%include "header.html"%}

    Setting variables
        to set variable in jinja use the set keyword

    If statement:
        to write an if statement using jinja type
        {%if condition%}
            ...code to be ran
        {%endif%}

    For statement:
        {%for item in list%}
            ...code to be ran.
        {%endfor%}

# Git:
    git init: used to initialize a new git repo
    git status: shows untracked files, or files that have changes made to them
    git add filename: adds the untracked and/or modified file to the list.
    git add . : adds all the untracked and/or modified file to the list.
    git commit -m "your message": commits the tracked file. with a message.
    git diff filename: compares the current version of the file to the version before it.
    git checkout filename: rollsback or goes back to the last version that was commited in the local repository.
    git log: show what commits were made and when it was made.
    git remote add whatyouwanttocalltheremoterepo url_of_remote_repo_on_github: creates a new remote repository for pushing local repository to remote repository.
    git push -u name_of_your_repo the_name_of_the_branch: pushes local repository to the remote repository.
    ls -a allows you to see hidden files in cmd terminal
    gitignore files: allows you to specify what can't be added and uploaded into your git repository.
        to do this create a file called .gitignore
    git rm --cached -r . : removes all staged files, that were added using git add
    git remote -v: check what the remote is configure to
    git branch: gives you a list of your branches
